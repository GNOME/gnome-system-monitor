# Configuration based on:
# - https://gitlab.gnome.org/GNOME/mutter/-/blob/main/tools/uncrustify.cfg
# - https://gitlba.gnome.org/GNOME/nautilus/-/blob/main/data/uncrustify.cfg
#
# Run `uncrustify --show-config` to see documentation for these options.

# Files are in UTF-8
utf8_force = true

# Unix style newlines
newlines = lf

## Indentation
indent_ternary_operator = 1
indent_columns          = 4
indent_with_tabs        = 0
indent_switch_case = 0
indent_case_brace = 0

# Whether the 'class' body is indented.
indent_class = true

## Newlines
nl_after_semicolon = true
nl_start_of_file   = remove
nl_end_of_file     = force
nl_end_of_file_min = 1

# Enforce newlines between arguments at function declarations/definitions,
# enclosing ')' belongs in the last line
nl_func_decl_args = force
nl_func_def_args  = force
nl_func_decl_end  = remove

# Also enforce the correct multiline-ness of function
# definitions/declarations/calls
nl_func_decl_args  = force
nl_func_def_args   = force
nl_func_decl_end   = remove
nl_func_call_end   = remove
nl_func_call_empty = remove

# Newlines for other statements (if, switch,..)
nl_assign_brace = remove
nl_enum_brace = remove
nl_union_brace = remove
nl_struct_brace = force
nl_class_brace = force
nl_do_brace = remove
nl_if_brace = remove
nl_for_brace = remove
nl_else_brace = remove
nl_elseif_brace = remove
nl_while_brace = remove
nl_switch_brace = remove
nl_before_case = false
nl_fcall_brace = force
nl_fdef_brace = force
nl_brace_else = remove
nl_brace_while = remove
nl_case_colon_brace = remove
nl_after_brace_open = true

## Alignment
# We align parameters in function definitions, like this:
#
#     int64_t meta_string_to_date (const char   *date_string,
#                                  int          *offset_p,
#                                  GError      **error)
#
align_func_params = true

# A '*' in a variable definition is considered 'dangling', rather than
# being part of the variable type. This produces the following style of
# alignment:
#
#    meta_string_to_date (const gchar  *date_string,
#                         gint         *offset_p,
#                         GError      **error)
#
align_var_def_star_style = 2  # dangling

# Keep extra spaces which uncrustify thinks are not needed for alignment.
#
# This causes uncrustify to preserve a lot more of the existing alignment
# in Mutter's source code, for example we can keep this:
#
#    meta_string_to_date (const char   *date_string,
#                         int          *offset_p,
#                         GError      **error)
#
# Instead of it being changed to this:
#
#    meta_string_to_date (const char  *date_string,
#                         int         *offset_p,
#                         GError     **error)
#
# Because this setting is enabled, the uncrustify process is not
# idempodent with regards to variable alignment because we still have some
# extra alignment in the sourcecode which uncrustify did not insert, and
# rerunning uncrustify with different settings might remove those extra spaces.
align_keep_extra_space = false

# Disable auto-alignment of macros, we often manually align the \ with
# spaces which uncrustify doesn't support.
align_nl_cont = false

## Spacing
# Ensure arithmetic operators are properly spaced, e.g:
# foo = 1 + (2 / 4);
sp_arith          = force
sp_arith_additive = force

# Ensure spaces between assignments, e.g.:
# foo = 2;
# foo += 2;
sp_assign = force

# Enforce spacing around = operator (and -=, etc).
sp_after_assign  = force
sp_before_assign = force

# Remove spaces between '*', e.g.:
# char **foo;
sp_between_ptr_star = remove

# Add or remove space before a pointer star '*', if followed by a function
# prototype or function definition.
sp_before_ptr_star_func = force

# Remove space after pointer stars.
sp_after_ptr_star = remove

# But add space before pointer return types and function
sp_after_ptr_star_func = force

# Ensure there is space between '*' and '(', e.g.:
# typedef GNode* (* ForeachFunc) (...);
sp_ptr_star_paren = force

# & for indirections must be together with the variable
sp_after_byref = remove

# Remove spacing around ++ / -- operators.
sp_incdec = remove

# Ensure there is space between comparators
sp_compare = force

# Spacing for parentheses
sp_else_brace    = force
sp_brace_else    = force
sp_inside_paren  = remove # "( 1 )" vs "(1)"
sp_inside_fparen = remove # "( 1 )" vs "(1)" - functions
sp_inside_sparen = remove # "( 1 )" vs "(1)" - if/for/etc
sp_before_sparen = force  # "if (" vs "if(" - if/for/etc

# Enforce the right spacing inside/around/after ( ) in typedefs and
# function calls
sp_inside_tparen      = remove
sp_func_call_paren    = force
sp_after_tparen_close = force

# Enforce the right psacing in function declarations
sp_func_def_paren = force

# Add stars at the beginning of each line in multiline comments
cmt_star_cont = true

# Remove space between glib/gettext i18n function shortcuts and (
set func_call_user _ C_ I_ N_ NC_ P_ Q_
sp_func_call_user_paren = remove

# Add or remove space before class ':'.
sp_before_class_colon = remove

# Add or remove space after class ':'.
sp_after_class_colon = add

# Space between (( and ))
sp_paren_paren = remove

# Ignore space after casts like `(int)foo`
sp_after_cast = ignore

# Ignore spaces after ; in for (; ; ;) statements.
sp_after_semi_for = ignore
sp_after_semi_for_empty = ignore

# Ignore Space after ! (not) operator, for example:
#
#     if (!home) {
#
sp_not = ignore

# Ignore space around preprocessor '##' operator. We might want a space before
# and no space after, for example in this:
#
#     #define trace(message, ...) \
#         g_debug (message, ##__VA_ARGS__)
#
sp_pp_concat = ignore

# Ignore spacing in multiline comments.
cmt_indent_multi = false

# Code modifications
# Enforce the use of braces for do, for, while and function blocks
mod_full_brace_do       = force
mod_full_brace_for      = force
mod_full_brace_function = force
mod_full_brace_while    = force

# Remove blanks
eat_blanks_before_close_brace = true
eat_blanks_after_open_brace   = true